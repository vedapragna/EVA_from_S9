# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8veF1bquHOAh6V7nVzM72AY9hndWHUw
"""

import cv2
import numpy as np
import torch
from torchvision import models, transforms
from torch.autograd import Variable
import torch
import torch.nn as nn
import torch.nn.functional as F
import pickle
import os
import argparse
import matplotlib.pyplot as plt
from matplotlib import cm
import PIL
import torch
import torch.nn.functional as F


class Grad_CAM:
    """Calculate GradCAM salinecy map.
    Args:
        input: Input image with shape of (1, 3, H, W)
        class_idx: Class index for calculating GradCAM.
            If not specified, the class index that makes the highest model prediction score will be used.
    Returns:
        mask: Saliency map of the same spatial dimension with input
        logit: Model output
    """

    def __init__(self, model, layer_name):
        self.model = model
        self.layer_name = layer_name
        self._target_layer()

        self.gradients = dict()
        self.activations = dict()

        def backward_hook(module, grad_input, grad_output):
            self.gradients['value'] = grad_output[0]

        def forward_hook(module, input, output):
            self.activations['value'] = output

        self.target_layer.register_forward_hook(forward_hook)
        self.target_layer.register_backward_hook(backward_hook)
    
    def _target_layer(self):
        layer_num = int(self.layer_name.lstrip('layer'))
        if layer_num == 1:
            self.target_layer = self.model.layer1
        elif layer_num == 2:
            self.target_layer = self.model.layer2
        elif layer_num == 3:
            self.target_layer = self.model.layer3
        elif layer_num == 4:
            self.target_layer = self.model.layer4

    def saliency_map_size(self, *input_size):
        device = next(self.model.parameters()).device
        self.model(torch.zeros(1, 3, *input_size, device=device))
        return self.activations['value'].shape[2:]

    def forward(self, input, class_idx=None, retain_graph=False):
        b, c, h, w = input.size()

        logit = self.model(input)
        if class_idx is None:
            score = logit[:, logit.max(1)[-1]].squeeze()
        else:
            score = logit[:, class_idx].squeeze()

        self.model.zero_grad()
        score.backward(retain_graph=retain_graph)
        gradients = self.gradients['value']
        activations = self.activations['value']
        b, k, u, v = gradients.size()

        alpha = gradients.view(b, k, -1).mean(2)
        # alpha = F.relu(gradients.view(b, k, -1)).mean(2)
        weights = alpha.view(b, k, 1, 1)

        saliency_map = (weights*activations).sum(1, keepdim=True)
        saliency_map = F.relu(saliency_map)
        saliency_map = F.upsample(saliency_map, size=(h, w), mode='bilinear', align_corners=False)
        saliency_map_min, saliency_map_max = saliency_map.min(), saliency_map.max()
        saliency_map = (saliency_map - saliency_map_min).div(saliency_map_max - saliency_map_min).data

        return saliency_map, logit

    def __call__(self, input, class_idx=None, retain_graph=False):
        return self.forward(input, class_idx, retain_graph)



def save_class_activation_on_image(org_img, activation_map, file_name):
    """
        Saves cam activation map and activation map on the original image
    Args:
        org_img (PIL img): Original image
        activation_map (numpy arr): activation map (grayscale) 0-255
        file_name (str): File name of the exported image
    """
    if not os.path.exists('./results'):
        os.makedirs('./results')
    # Grayscale activation map
    path_to_file = os.path.join('./results', file_name + '_Cam_Grayscale.jpg')
    cv2.imwrite(path_to_file, activation_map)
    # display(HTML('<h3>_Cam_Grayscale</h3>'))
    # show_img(activation_map)
    # Heatmap of activation map
    activation_heatmap = cv2.applyColorMap(activation_map, cv2.COLORMAP_HSV)
    path_to_file = os.path.join('./results', file_name + '_Cam_Heatmap.jpg')
    cv2.imwrite(path_to_file, activation_heatmap)
    # display(HTML('<h3>_Cam_Heatmap</h3>'))
    # show_img(activation_heatmap)
    # Heatmap on picture
    org_img = cv2.resize(org_img, (32, 32))
    img_with_heatmap = np.float32(activation_heatmap) + np.float32(255*org_img)
    img_with_heatmap = img_with_heatmap / np.max(img_with_heatmap)
    path_to_file = os.path.join('./results', file_name + '_Cam_On_Image.jpg')
    cv2.imwrite(path_to_file, np.uint8(255 * img_with_heatmap))
    img_with_heatmap = np.uint8(255 * img_with_heatmap)
    # display(HTML('<h3>_Cam_On_Image</h3>'))
    # show_img(img_with_heatmap)
    return activation_map, activation_heatmap, img_with_heatmap

def preprocess_image(cv2im, resize_im=False):
    """
        Processes image for CNNs
    Args:
        PIL_img (PIL_img): Image to process
        resize_im (bool): Resize to 224 or not
    returns:
        im_as_var (Pytorch variable): Variable that contains processed float tensor
    """
    import torch
    if(torch.is_tensor(cv2im)):
        preprocessed_img = cv2im
    else:
        img = np.float32(cv2.resize(cv2im, (32, 32))) / 255
        means = [0.5,0.5,0.5]   #[0.485, 0.456, 0.406]
        stds = [0.5,0.5,0.5]    #[0.229, 0.224, 0.225]

        preprocessed_img = img.copy()[:, :, ::-1]
        for i in range(3):
            preprocessed_img[:, :, i] = preprocessed_img[:, :, i] - means[i]
            preprocessed_img[:, :, i] = preprocessed_img[:, :, i] / stds[i]
        preprocessed_img = \
            np.ascontiguousarray(np.transpose(preprocessed_img, (0, 1, 2)))
        preprocessed_img = torch.from_numpy(preprocessed_img)
        
    preprocessed_img.unsqueeze_(0)
    input = preprocessed_img.requires_grad_(True)
    return input


def load_m(model_path,model_instance,target,export):    
    
    file_name_to_export = export
    target_class = int(target)

    model = model_instance
    model.load_state_dict(torch.load(model_path))

    num_ftrs = model.linear.in_features
    model.linear = nn.Linear(num_ftrs, 10)

    use_gpu = torch.cuda.is_available()
    #use_gpu = False

    if use_gpu:
        model = model.cuda()

    model.eval()

    return model

def visualize_cam(mask, img, alpha=1.0):
    """Make heatmap from mask and synthesize GradCAM result image using heatmap and img.
    Args:
        mask (torch.tensor): mask shape of (1, 1, H, W) and each element has value in range [0, 1]
        img (torch.tensor): img shape of (1, 3, H, W) and each pixel value is in range [0, 1]
    Returns:
        heatmap (torch.tensor): heatmap img shape of (3, H, W)
        result (torch.tensor): synthesized GradCAM result of same shape with heatmap.
    """

    heatmap = (255 * mask.squeeze()).type(torch.uint8).cpu().numpy()
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
    heatmap = torch.from_numpy(heatmap).permute(2, 0, 1).float().div(255)
    b, g, r = heatmap.split(1)
    #g, b, r = heatmap.split(1)
    heatmap = torch.cat([r, g, b]) * alpha

    result = heatmap + img.cpu()
    result = result.div(result.max()).squeeze()

    return heatmap, result

def get_CAMS(image,model_instance,model_path,Actual_label,Pred_label,tgt_layer):

    # Image: tensor Image or Image path 
    # Open CV preporcessing

    import torch
    #print(torch.is_tensor(image))
    if(torch.is_tensor(image) != True):
        #print("Inside if")
        image = cv2.imread(image, 1)
        image.shape
    else:
        orig_img = np.squeeze(image.numpy())
        #orig_img = (orig_img - np.min(orig_img)) / (np.max(orig_img) - np.min(orig_img))
        orig_img = orig_img * 0.5 + 0.5
        orig_img = orig_img.transpose((1, 2, 0))
    image_prep = preprocess_image(image)

    class_map = { 'airplane':0, 'automobile' : 1, 'bird' : 2, 'cat' : 3, 'deer' : 4,
    'dog': 5,'frog' : 6, 'horse' : 7, 'ship' : 8, 'truck' : 9 }

    label_map = { 0:'airplane', 1 :'automobile', 2 : 'bird', 3 : 'cat', 4 : 'deer',
    5 : 'dog', 6 : 'frog', 7 : 'horse', 8 : 'ship', 9 : 'truck'}
    

    use_cuda = torch.cuda.is_available()
    device = torch.device("cuda" if use_cuda else "cpu")
    
    # Load the model
    model = load_m(model_path,model_instance,Pred_label,"")#load_model()

    cam = Grad_CAM(model.to("cpu"), tgt_layer)

    mask, _ = cam(image)

    heatmap, heatmap_on_image = visualize_cam(mask,image_prep)
    
    actual = label_map[Actual_label.item()]
    # Save mask
    #activation_map, activation_heatmap, img_with_heatmap = save_class_activation_on_image(orig_img, cam, "sample"+actual) 
    #print('Grad cam completed')
    
    pred = label_map[Pred_label.item()]
    return heatmap, heatmap_on_image, actual, pred #activation_map, activation_heatmap, img_with_heatmap